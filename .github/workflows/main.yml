name: Deploy to GitHub Pages

# Run workflow on every push to the master branch (triggers the workflow)
on:
  push:
    branches: [ master ]
    
jobs:
  deploy-to-github-pages:
    # Use ubuntu-latest image to run steps on
    runs-on: ubuntu-latest
    steps:
      # Uses GitHub's checkout action to checkout code form the master branch
    - uses: actions/checkout@v2
    
    # Sets up .NET Core SDK 6.0.x on the ubuntu-machine
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
      # Publishes Blazor project to the release-folder
      # Using the -c (--configuration) argument, you can tell to build the project using the Release configuration
      # Using the -o (--output) argument, you can specify where to put the published files. Tell dotnet to publish the project to the release folder
    - name: Publish .NET Core Project
      run: dotnet publish BlazorWasmWithPwaTest.csproj -c Release -o release --nologo
      
      # Changes the base-tag in index.html from '/' to 'BlazorPwaGHPages' to match GitHub Pages repository subdirectory
    - name: Change base-tag in index.html from / to BlazorPwaGHPages
      run: sed -i 's/<base href="\/" \/>/<base href="\/BlazorPwaGHPages\/" \/>/g' release/wwwroot/index.html
      
      # changes the base-tag in index.html from '/' to 'BlazorGitHubPagesDemo' to match GitHub Pages repository subdirectory
    - name: Fix service-worker-assets.js hashes
      working-directory: release/wwwroot
      run: |
        jsFile=$(<service-worker-assets.js)
        # remove JavaScript from contents so it can be interpreted as JSON
        json=$(echo "$jsFile" | sed "s/self.assetsManifest = //g" | sed "s/;//g")
        # grab the assets JSON array
        assets=$(echo "$json" | jq '.assets[]' -c)
        for asset in $assets
        do
          oldHash=$(echo "$asset" | jq '.hash')
          #remove leading and trailing quotes
          oldHash="${oldHash:1:-1}"
          path=$(echo "$asset" | jq '.url')
          #remove leading and trailing quotes
          path="${path:1:-1}"
          newHash="sha256-$(openssl dgst -sha256 -binary $path | openssl base64 -A)"
          
          if [ $oldHash != $newHash ]; then
            # escape slashes for json
            oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
            newHash=$(echo "$newHash" | sed 's;/;\\/;g')
            echo "Updating hash for $path from $oldHash to $newHash"
            # escape slashes second time for sed
            oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
            jsFile=$(echo -n "$jsFile" | sed "s;$oldHash;$newHash;g")
          fi
        done
        echo -n "$jsFile" > service-worker-assets.js
      
       # Add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
    - name: Add .nojekyll file
      run: touch release/wwwroot/.nojekyll
      
      # This action will make it easy to publish static files to GitHub Pages
      # The ${{ secrets.GITHUB_TOKEN }} resolves to a token used for securely communicating with GitHub
    - name: Commit wwwroot to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: release/wwwroot
